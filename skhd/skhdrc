# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
alt - z : yabai -m window --focus recent

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east
shift + alt - z : yabai -m window --swap recent

# move managed window
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east
shift + cmd - z : yabai -m window --warp recent

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
alt - s     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill half of screen
alt - left   : yabai -m window --grid 1:2:0:0:1:1
alt - right   : yabai -m window --grid 1:2:1:1:0:0

# create and deleat desktop
shift + alt - c : yabai -m space --create
shift + alt - d : yabai -m space --destroy

# fast focus desktop
alt - z : yabai -m space --focus recent
alt - 1 : yabai -m space --focus first
alt - 2 : yabai -m space --focus 2 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "2" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 3 : yabai -m space --focus 3 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "3" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 4 : yabai -m space --focus 4 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "4" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 5 : yabai -m space --focus 5 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "5" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 6 : yabai -m space --focus 6 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "6" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 7 : yabai -m space --focus 7 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "7" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 8 : yabai -m space --focus 8 || if [ "$(yabai -m query --spaces | jq 'map(select(."has-focus" == true))[-1].index')" -ne "8" ]; \
then { yabai -m space --create; } && {yabai -m space --focus last; } fi
alt - 9 : yabai -m space --focus last
alt - tab : yabai -m space --focus next || yabai -m space --focus first
shift - tab : yabai -m space --focus prev || yabai -m space --focus last

# send window to desktop and follow focus
shift + alt - 1 : yabai -m window --space first; yabai -m space --focus first
shift + alt - 2 : { yabai -m window --space 2 && yabai -m space --focus 2 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 3 : { yabai -m window --space 3 && yabai -m space --focus 3 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 4 : { yabai -m window --space 4 && yabai -m space --focus 4 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 5 : { yabai -m window --space 5 && yabai -m space --focus 5 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 6 : { yabai -m window --space 6 && yabai -m space --focus 6 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 7 : { yabai -m window --space 7 && yabai -m space --focus 7 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 8 : { yabai -m window --space 8 && yabai -m space --focus 8 } || \
  { yabai -m space --create && yabai -m window --space last && yabai -m space --focus last }
shift + alt - 9 : yabai -m window --space last; yabai -m space --focus last

# mirror
alt - y : yabai -m space --mirror y-axis
alt - x : yabai -m space --mirror x-axis

# focus monitor
ctrl + alt - z  : yabai -m display --focus prev
ctrl + alt - 1  : yabai -m display --focus 1
ctrl + alt - 2  : yabai -m display --focus 2

# send window to monitor and follow focus
ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2

# move floating window
shift + ctrl - h : yabai -m window --move rel:-20:0
shift + ctrl - j : yabai -m window --move rel:0:20
shift + ctrl - k : yabai -m window --move rel:0:-20
shift + ctrl - l : yabai -m window --move rel:20:0

# increase window size
alt - y : yabai -m window --resize left:-20:0
alt - u : yabai -m window --resize bottom:0:20
alt - i : yabai -m window --resize right:0:-20
alt - o : yabai -m window --resize top:0:-20

# decrease window size
shift + alt - y : yabai -m window --resize left:20:0
shift + alt - u : yabai -m window --resize bottom:0:-20
shift + alt - i : yabai -m window --resize right:0:20
shift + alt - o : yabai -m window --resize top:0:20

# toggle window zoom
alt - f : yabai -m window --toggle zoom-fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window split type
alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
shift + alt - space  : yabai -m window --toggle float --grid 4:4:1:1:2:2
